name: Build Raspberry Pi ebpf Kernel

on:
  workflow_dispatch:

env:
  TZ: Asia/Shanghai


jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        board:
          - name: rpi4
            defconfig: bcm2711_defconfig
            patch_file: rpi4_ebpf.patch
            kernel: kernel8
          - name: rpi5
            defconfig: bcm2712_defconfig
            patch_file: rpi5_ebpf.patch
            kernel: kernel_2712

    steps:
      - name: Before freeing up disk space
        run: |
          echo "Before freeing up disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      - name: "Optimize Disk Space"
        uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
        with:
          operate_sudo: "True"
          general_include: ".+"
          general_exclude: |-
            ^GCC$
            ^G\+\+$
            Clang
            LLVM
          docker_include: ".+"
          docker_prune: "True"
          docker_clean: "True"
          apt_prune: "True"
          apt_clean: "True"
          homebrew_prune: "True"
          homebrew_clean: "True"
          npm_prune: "True"
          npm_clean: "True"
          os_swap: "True"

      - name: Freeing up disk space
        uses: easimon/maximize-build-space@master
        with: 
          root-reserve-mb: 2048
          swap-size-mb: 1
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Free up disk space complete
        run: |
          echo "Free up disk space complete"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      - name: Checkout
        uses: actions/checkout@main
      
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install git bc bison flex libssl-dev make libc6-dev libncurses5-dev crossbuild-essential-arm64 pahole libelf-dev
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
          /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules
          sudo timedatectl set-timezone "$TZ"

      - name: Clone source code
        run: |
          git clone --depth=1 https://github.com/raspberrypi/linux.git

      - name: Load default defconfig and apply patch
        working-directory: ./linux
        run: |
          echo "Building for board: ${{ matrix.board.name }}"
          KERNEL=${{ matrix.board.kernel }}
          echo "KERNEL=$KERNEL" >> $GITHUB_ENV
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- ${{ matrix.board.defconfig }}
          patch -p0 < ../${{ matrix.board.patch_file }}

      - name: Build Kernel
        working-directory: ./linux
        run: |
          make -j$(($(nproc) * 3 / 2 )) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- Image modules dtbs

      - name: Install modules
        working-directory: ./linux
        run: |
          mkdir -p ../output/modules
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules_install INSTALL_MOD_PATH=../output/modules
      
      - name: Get Kernel Version
        id: kernel
        run: |
          cd linux
          VERSION=$(make kernelrelease)
          echo "kernel_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Package output files
        run: |
          mkdir -p output/package/boot
          cp linux/arch/arm64/boot/Image output/package/boot/${{ env.KERNEL }}.img
          cp -r linux/arch/arm64/boot/dts/broadcom/*.dtb output/package/boot/
          cp -r linux/arch/arm64/boot/dts/overlays output/package/boot/
          cp -r output/modules/lib output/package/
          tar -czf ${{ matrix.board.name }}-kernel-${{ steps.kernel.outputs.kernel_version }}.tar.gz -C output/package .

      - name: Upload kernel Image and DTBs
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.board.name }}-kernel-${{ steps.kernel.outputs.kernel_version }}
          path: ${{ matrix.board.name }}-kernel-${{ steps.kernel.outputs.kernel_version }}.tar.gz
